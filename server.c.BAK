/**
 * @file server.c
 * @author OSUE Team <osue-team@cps.tuwien.ac.at>
 * @date 2018-03-02
 *
 * @brief Server for OSUE exercise 1B `Battleship'.
 */

// IO, C standard library, POSIX API, data types:
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <stdint.h>
#include <stdbool.h>
#include <string.h>
#include <limits.h>

//Assertions, errors, signals:
#include <assert.h>
#include <errno.h>
#include <signal.h>

//Time:
#include <time.h>

//Sockets, TCP,...:
#include <sys/types.h>
#include <sys/socket.h>
#include <netdb.h>
#include <fcntl.h>

//stuff shared by client and server:
#include "common.h"

//Static variables for things
you might want to access from several functions:
	static char    *port = DEFAULT_PORT;
//the port to bind to

// Static variables for resources
that should be freed before exiting:
	static struct addrinfo *ai = NULL;
//stores address information
static int	sockfd = -1;
//socket file descriptor
static int	connfd = -1;
//connection file descriptor

/*
 * TODO You should also have some kind of a list which saves information
 * about your ships. For this purpose you might want to define a struct. Bear
 * in mind that your server must keep record about which ships have been hit
 * (and also where they have been hit) in order to know when a ship was sunk.
 * 
 * You might also find it convenient to add a few functions, for instance: - a
 * function which cleans up all resources and exits the program - a function
 * which parses the arguments from the command line - a function which adds a
 * new ship to your list of ships - a function which checks whether a
 * client's shot hit any of your ships
 */

// Prototypes
void		usage     (void);
void		invalidShip(char *givenShip);
void		cleanUp   (void);
void		parseArgs (int argc, char *argv[], const char *optstring);
int		getIntBetweenAandJ(char c);
int		digitCharToInt(char c);
#define OPT_STR "p:"
static char    *prog_name;
struct shipdata {
	int		x;
	int		y;
	int		status;
};

struct shipsType2 {
	struct shipdata	d[SHIP_CNT_LEN2];
};

struct shipsType3 {
	struct shipdata	d[SHIP_CNT_LEN3];
};

struct shipsType4 {
	struct shipdata	d[SHIP_CNT_LEN4];
};

int
main(int argc, char *argv[])
{
	parseArgs(argc, argv, OPT_STR);
	uint8_t		map    [MAP_SIZE][MAP_SIZE];
	memset(&map, SQUARE_UNKNOWN, sizeof(map));
	print_map(map);

	cleanUp();
	return EXIT_SUCCESS;

	struct addrinfo	hints;
	memset(&hints, 0, sizeof(hints));
	hints.ai_family = AF_INET;
	hints.ai_socktype = SOCK_STREAM;
	hints.ai_flags = AI_PASSIVE;

	int		res = getaddrinfo(NULL, port, &hints, &ai);
	/*
	 * TODO check for errors
	 */

	sockfd = socket(ai->ai_family, ai->ai_socktype, ai->ai_protocol);
	/*
	 * TODO check for errors
	 */

	int		val = 1;
	res = setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &val, sizeof val);
	/*
	 * TODO check for errors
	 */

	res = bind(sockfd, ai->ai_addr, ai->ai_addrlen);
	/*
	 * TODO check for errors
	 */

	res = listen(sockfd, 1);
	/*
	 * TODO check for errors
	 */

	connfd = accept(sockfd, NULL, NULL);
	/*
	 * TODO check for errors
	 */

	/*
	 * TODO Here you might want to add variables to keep track of the
	 * game status, for instance the number of rounds that have been
	 * played.
	 */
	printf("res%d.", res);
	for (int roundNr = 0; roundNr < MAX_ROUNDS; roundNr++) {
		printf("r%d ", roundNr);
		/*
		 * TODO add code to: - wait for a request from the client -
		 * check for a parity error or invalid coordinates in the
		 * request - check whether a ship was hit and determine the
		 * status to return - send an according response to the
		 * client
		 */
	}

	/*
	 * TODO cleanup
	 */
	cleanUp();
	return EXIT_SUCCESS;
}

void
cleanUp(void)
{
	prog_name = NULL;
	port = NULL;
	//empty MAP;
}

void
parseArgs(int argc, char *argv[], const char *optstring)
{
	int		localOpt_p = 0;
	prog_name = argv[0];
	if (argc == 1) {
		usage();
	}
	for (int argmntIndex = 1; argmntIndex < argc; argmntIndex++) {
		int		opt;
		while ((opt = getopt(argc, argv, optstring)) != -1) {
			switch (opt) {
			case 'p':
				localOpt_p++;
				if (localOpt_p > 1) {
					usage();
				}
				port = optarg;
				break;
			default:
				usage();
			}
		}

		if (optind == argmntIndex) {
			char           *ship = argv[argmntIndex];
			printf("Ship: %s\n", ship);

			size_t		arglen = strnlen(ship, 5);
			if (arglen != 4) {
				invalidShip(ship);
			}
			//Bow(front)
				int		x1;
			if ((x1 = getIntBetweenAandJ(ship[0])) != -1) {
				int		y1 = digitCharToInt(ship[1]);
				printf("Bow: x=%d , y=%d - ", x1, y1);
			} else {
				invalidShip(ship);
			}

			//Stern(back)
				int		x2;
			if ((x2 = getIntBetweenAandJ(ship[2])) != -1) {
				int		y2 = digitCharToInt(ship[3]);
				printf("Stern: x=%d , y=%d - ", x2, y2);
			} else {
				invalidShip(ship);
			}

			optind++;
			//Son satir olmali ! like getopt does
		}
	}
	printf("SERVER port: %s\n", port);
}

void
usage(void)
{
	fprintf(stderr, "Usage: %s [-p PORT] SHIP1 ...\n", prog_name);
	exit(EXIT_FAILURE);
}

void
invalidShip(char *givenShip)
{
	fprintf(stderr, "Invalid ship: %s\n", givenShip);
	usage();
}

//returns index number of given letter for the
	x - axis of game board.
		int		getIntBetweenAandJ(char c){
	int		x = -1;
	for (x = 0; x < MAP_SIZE; x++) {
		if ((x + 'A') == c) {
			return x;
		}
	}
	return -1;
	}

	int		digitCharToInt(char c){
		int		x = -1;
		for (x = 0; x < MAP_SIZE; x++) {
			if ((x + '0') == c) {
				return x;
			}
		}
		return -1;
	}

	/*
	 * Notes: - NULL for static pointers? -
	 * 
	 * Next: - Tüm assignment süper detayli okunacak. Sonra karar-> -
	 * initMap() Acaba struct ile map yapmak yerine map[][] mi yapmali?
	 * Cünkü printing function öyle calisiyor. Eger öyle ise "For
	 * this purpose you might want to define a struct." ne icin denmis? -
	 * Acaba gemileri mi diyor? => Her bir gemi tipi/HER GEMI icin bir
	 * struct yapip icine (tanimlandiysa) koordinatlarini atmaca mesela?
	 * - Eger map[][] yapilacaksa init de memset ile yapilabilir
	 */
